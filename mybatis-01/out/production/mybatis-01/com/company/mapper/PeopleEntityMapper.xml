<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace=其接口的全类名 -->
<mapper namespace="com.company.mapper.PeopleMapper">
<!--<mapper namespace="com.company.mapper.PeopleEntityMapper">-->

    <!--
        mybatis自带缓存
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU,移除最长时间不用的对形象
        flushInterval:刷新间隔时间，单位为毫秒, 这里配置的是100秒刷新，如果你不配置它，那么当QL被执行的时候才会去刷新缓存。
        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。这里配置的是1024个对象
        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有办法修改缓存，他的默认值是false，不允许我们修改
    -->
<!--    <cache  eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>-->
<!--    <cache type="org.mybatis.caches.ehcache.EhcacheCache">-->
<!--        &lt;!&ndash;可以覆盖Ehcache.xml中的值        &ndash;&gt;-->
<!--        <property name="maxElementsInMemory" value="1000"/>-->
<!--    </cache>-->



    <select id="queryPeopleById" resultType="people" parameterType="int">
        select * from people where id = #{id};
    </select>
    <insert id="addPeople" parameterType="people">
        insert into people(id, name, age) values (#{id},#{name},#{age});
    </insert>
    <update id="updatePeople" parameterType="people">
        update people set name = #{name} , age = #{age} where id = #{id};
    </update>
    <delete id="deletePeople" parameterType="int">
        delete from people where id = #{aaa};
    </delete>
    <select id="queryAllPeople" resultType="people">
        select * from people;
    </select>



    <!--
          #{任意值} "ls"(String)==>'ls'    防止SQL注入
          ${value} "ls"(String)==>ls    手动加‘’       不防止SQL注入
    -->
    <select id="queryPeopleByName" parameterType="string" resultType="people">
         select id,name,age  from people where name = '${value }';
    </select>
    <select id="queryPeopleOrderByColumn" resultType="people" >
         select id,name,age  from people order by ${value } asc ;
    </select>
    <select id="queryPeopleByIdOrName" parameterType="people" resultType="people">
         select id,name,age from people where age= #{age} or name like '%${name}%';
    </select>
    <select id="queryPeopleByIAddress" parameterType="people" resultMap="Peoplesdfsd">
         select id,name,age,homeaddress,schooleaddress from people where  schooleaddress = #{address.schooleaddress} or homeaddress = #{address.homeaddress}
    </select>
    <resultMap id="Peoplesdfsd" type="people">
        <id property="id" column="id"/>
        <result column="name" property="name"/>
        <result property="age" column="age"/>
        <result property="address.homeaddress" column="homeaddress"/>
        <result column="schooleaddress" property="address.schooleaddress"/>
    </resultMap>


    <!--测试转化器   如果实体类与数据库表的一一对应，就可以使用resultType，否则使用resultMap(更改名字不同，属性不同) -->
    <resultMap id="peopleResult" type="people">
        <id property="id" column="id"/>
        <result column="name" property="name"/>
        <result property="age" column="age"/>
        <result property="sex" column="sex" javaType="boolean" jdbcType="INTEGER"/>
    </resultMap>
    <select id="queryPeopleWithConverter" parameterType="int" resultMap="peopleResult">
         select * from people where id = ${value};
    </select>
    <insert id="addPeopleWithConverter" parameterType="people">
          insert into people(id, name, age, sex) values (#{id},#{name},#{age},#{sex,javaType=boolean, jdbcType=INTEGER});
    </insert>


    <!--HashMap-->
    <select id="queryPeopleByIdOrNameWithHashMap" parameterType="HashMap" resultType="people">
         select id,name,age from people where age= #{age} or name like '%${name}%';
    </select>
    <select id="queryPeopleOutByHashMap" resultType="hashmap">
        select id as "pno" , name as "pname" ,age as "page" from people
    </select>
    <select id="queryPeopleByHashMap" resultType="hashmap">
        select id as "pno" , name as "pname" ,age as "page" from people
    </select>



    <!--储存过程    -->
    <!--
        DELIMITER $$
        CREATE PROCEDURE queryCount(
            IN  p_name varchar(20),
            OUT p_count  int
        )
        BEGIN
            SELECT count(1) INTO p_count
            FROM people
            WHERE name = p_name;
        END $$
        DELIMITER ;
        call queryCount('li',@a);
        select @a;
    -->
    <select id="queryPeopleCountBynameWithProcedure" statementType="CALLABLE" parameterType="HashMap">
      {
          CALL queryCount(
            #{p_name, jdbcType=VARCHAR,mode=IN },
            #{p_count, jdbcType=INTEGER,mode=OUT }
          )
      }
    </select>
    <!--
        DELIMITER $$
        create procedure deletePeople(in pno int)
        begin
            delete from people where id = pno;
        end $$
        DELIMITER ;
    -->
    <delete id="deletePeopleByIdWithProcedure" statementType="CALLABLE" parameterType="hashmap">
        {
            call deletePeople(#{pno,jdbcType=INTEGER,mode=IN})
        }
    </delete>



    <!--动态SQL    -->
    <select id="queryPeopleWithSQLTag" parameterType="people" resultType="people">
        select id,name,age from people where 1=1
        <if test=" name !=null and name != '' ">
            and name = #{name}
        </if>
        <if test=" age != null and age != 0">
            and age = #{age}
        </if>
    </select>
    <select id="queryPeopleWithSQLTag1" parameterType="people" resultType="people">
        select id,name,age from people
        <where>
            <if test=" name !=null and name != '' ">
                and name = #{name}
            </if>
            <if test=" age != null and age != 0">
                and age = #{age}
            </if>
        </where>
    </select>
    <select id="queryPeopleForeach" resultType="people" parameterType="com.company.entity.Foreach">
        select * from people
        <where>
            <if test=" ids !=null and ids.size>0 ">
                <foreach collection="ids" open=" and id in (" close=")" item="id" separator=",">
                   #{id}
                </foreach>
            </if>
        </where>
    </select>
    <!--数组的关键字是array(必须)    -->
<!--    <select id="queryPeopleArrary" resultType="people" parameterType="int[]">-->
    <select id="queryPeopleArrary" resultType="people" parameterType="arraylist">
    select * from people
        <where>
            <if test=" array !=null and array.length>0 ">
                <foreach collection="array" open=" and id in (" close=")" item="id" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
    <select id="queryPeopleList" resultType="people" parameterType="list">
        select * from people
        <where>
            <if test=" list !=null and list.size >0 ">
                <foreach collection="list" open=" and id in (" close=")" item="id" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
<!--    <select id="queryPeopleObjectArrary" resultType="people" parameterType="arraylist">-->
    <select id="queryPeopleObjectArrary" resultType="people" parameterType="object[]">
        select * from people
        <where>
            <if test=" array !=null and array.length>0 ">
                <foreach collection="array" open=" and id in (" close=")" item="peo" separator=",">
                    #{peo.id}
                </foreach>
            </if>
        </where>
    </select>
    <!--SQL片段    -->
    <sql id="objectArrary">
        <where>
            <if test=" array !=null and array.length>0 ">
                <foreach collection="array" open=" and id in (" close=")" item="peo" separator=",">
                    #{peo.id}
                </foreach>
            </if>
        </where>
    </sql>
    <select id="queryPeopleSQL" resultType="people" parameterType="object[]">
        select * from people
        <!-- 如果SQL片段不在同一个文件中,全类名.id   -->
        <include refid="objectArrary"></include>
    </select>



    <!--关联查询    -->
    <!--one to one    -->
    <select id="queryByIdWithOneToOne" parameterType="int" resultType="people_business">
        select s.*,c.* from people as s
        inner join mybatis_people_card as c
        on c.cardid = s.cardid
        where s.id = #{id}
    </select>
    <select id="queryByIdWithOneToOneWithHashmap" parameterType="int" resultType="hashmap">
        select s.*,c.* from people as s
        inner join mybatis_people_card as c
        on c.cardid = s.cardid
        where s.id = #{id}
    </select>
    <resultMap id="peopleandcard" type="people">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="address.homeaddress" column="homeaddress"/>
        <result property="address.schooleaddress" column="schooleaddress"/>
        <result property="sex" column="sex"/>
        <result property="age" column="age"/>
        <!--one to one        -->
        <association property="cardEntity" javaType="mybatis_people_card">
            <id property="cardId" column="cardid"/>
            <result property="cardInfo" column="cardinfo"/>
        </association>
    </resultMap>
    <select id="queryByIdWithOneToOneWithMap" parameterType="int" resultMap="peopleandcard">
        select s.*,c.* from people as s
        inner join mybatis_people_card as c
        on c.cardid = s.cardid
        where s.id = #{id}
    </select>


    <!--one to many    -->
    <resultMap id="class_people" type="people_class">
        <id property="classid" column="classid"/>
        <result property="classname" column="classname"/>
        <!--one to many    ofType:属性的元素类型    -->
        <collection property="peopleEntity" ofType="people" >
            <id property="id" column="id"/>
            <result property="name" column="name"/>
            <result property="address.homeaddress" column="homeaddress"/>
            <result property="address.schooleaddress" column="schooleaddress"/>
            <result property="sex" column="sex"/>
            <result property="age" column="age"/>
            <!--可以级联 继续关联           -->
        </collection>
    </resultMap>
    <select id="queryByIdWithOneToMany" parameterType="int" resultMap="class_people">
        select s.*,c.* from people as s
        inner join mybatis_class as c
        on c.classid = s.classid
        where c.classid = #{id}
    </select>



    <!--延迟加载 (主查询,次查询)   -->
    <resultMap id="people_lazey_card" type="people">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="address.homeaddress" column="homeaddress"/>
        <result property="address.schooleaddress" column="schooleaddress"/>
        <result property="sex" column="sex"/>
        <result property="age" column="age"/>
        <!--延迟加载  先people,再差people_card     -->
        <association property="cardEntity" javaType="mybatis_people_card" select="com.company.mapper.PeopleCardMapper.queryCordById" column="cardid">
        </association>
    </resultMap>
    <select id="queryByIdWithLazey" parameterType="int" resultMap="people_lazey_card">
        select * from people
    </select>
    <select id="queryPeopleAll" parameterType="int" resultType="people">
        select * from people where classid = #{id};
    </select>






</mapper>
